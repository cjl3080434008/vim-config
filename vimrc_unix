"==================for python================================
"
"写python需要注意的是
"因为用到了autocomplete插件,所以当没有函数说明时就是autocomplete在起作用
"这时候需要用c-x c-o来获得代码智能提示
"
"============================================================
"autocmd BufEnter * call DoWordComplete()
set tags=tags;
"允许在当前目录下查找tags
set autochdir
set foldmethod=manual
set cindent
set tags+=/usr/include/c++/tags
"set tags+=/usr/local/tags
set tags+=/Users/jianlinchen/source/lua_source/lua-5.2.1/src/tags
set tags+=/Users/jianlinchen/source/go/go_src_1.1/src/pkg/tags
colorscheme desert
set nocp
"开启代码自动补全
autocmd FileType cpp set omnifunc=cppcomplete#Complete
autocmd FileType python set omnifunc=pythoncomplete#Complete
""set nocompatible

""set backspace=indent,eol,start
set nobackup		" do not keep a backup file, use versions instead
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching
set showtabline=2      " Allways show the tab page 
set nu!
set guifont=Courier_New:h16
set guifontwide=STXihei:h12
set magic
set smartindent
set tabstop=4
set shiftwidth=4
set softtabstop=4
set noexpandtab
set linebreak        " 整词换行
"cscope配置
""set cscopequickfix=s-,c-,d-,i-,t-,e-

" 按下F3自动补全代码，注意该映射语句后不能有其他字符，包括tab；否则按下F3会自动补全一些乱码
""map <F12> <C-X><C-O>
map <C-F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
set completeopt=longest,menu
let OmniCpp_GlobalScopeSearch = 1  " 0 or 1
let OmniCpp_ShowAccess = 1
let OmniCpp_DisplayMode = 1 "使用“MyClass::”显示类的所有方法和属性，这样比较方便
let OmniCpp_MayCompleteDot = 1 " autocomplete with .
let OmniCpp_MayCompleteArrow = 1 " autocomplete with ->
let OmniCpp_MayCompleteScope = 1 " autocomplete with ::
let OmniCpp_SelectFirstItem = 2 " select first item (but don't insert)
let OmniCpp_NamespaceSearch = 1 " search namespaces in this and included files
let OmniCpp_ShowPrototypeInAbbr = 1 " show function prototype (i.e. parameters) in popup window
					
"自动不起括号
inoremap ( ()<ESC>i
inoremap ) <c-r>=ClosePair(')')<CR>
inoremap { {}<ESC>i
inoremap } <c-r>=ClosePair('}')<CR>
inoremap [ []<ESC>i
inoremap ] <c-r>=ClosePair(']')<CR>
"inoremap < <><ESC>i
"inoremap > <c-r>=ClosePair('>')<CR>
"inoremap " ""<ESC>i

function ClosePair(char)
	if getline('.')[col('.') - 1] == a:char
		return "\<Right>"
	else
		return a:char
	endif
endf

map Q gq

""set hlsearch
""set autoindent		" always set autoindenting on

"===============Config bundles================
set nocompatible              " be iMproved
filetype off                  " required!
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
" let Vundle manage Vundle
Bundle 'gmarik/vundle'
" " My bundles here:
" " original repos on GitHub
Bundle 'cespare/vim-golang'
Bundle 'Blackrush/vim-gocode'
Bundle 'Lokaltog/vim-powerline'
set laststatus=2
let g:Powerline_symbols = 'fancy'
" " vim-scripts repos
" L9代码提示中的注释显示
Bundle 'L9'
"FuzzyFinder由ctrlp替换,用于深度项目链中的文件查找
"切ctrlp是能用必须在项目中有.git, .svn等版本管理文件
Bundle 'kien/ctrlp.vim'
let g:ctrlp_map = ',,'
let g:ctrlp_open_multiple_files = 'v'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git)$',
  \ 'file': '\v\.(log|jpg|png|jpeg)$',
  \ }
"Markdown is a text-to-HTML conversion tool for web writers. 
Bundle 'plasticboy/vim-markdown'
let g:vim_markdown_folding_disabled=1
"for python  ----start
Bundle 'mjbrownie/pythoncomplete.vim'
Bundle 'python.vim'
"Bundle 'pep8'
Bundle 'git://git.wincent.com/command-t.git'
"supertab 和AutoComplPop一个功能但没有AutoComplPop强大
"Bundle 'https://github.com/ervandew/supertab.git'
"  let g:SuperTabDefaultCompletionType = "<c-n>"
Bundle 'https://github.com/tpope/vim-git.git'
"代码自动完成 snipmate
Bundle "MarcWeber/vim-addon-mw-utils"
Bundle "tomtom/tlib_vim"
Bundle "garbas/vim-snipmate"
Bundle "honza/vim-snippets"
"代码语法错误检测 syntastic
Bundle 'scrooloose/syntastic'
"在打开文件的时候检查
let g:syntastic_check_on_open=1
"python自动补全代码插件 jedi-vim
Bundle 'davidhalter/jedi-vim'
"Bundle 'Valloric/YouCompleteMe' "need vim 7.3.4+
"自动补全代码插件(当前行)
Bundle 'ayang/AutoComplPop' 
Bundle 'The-NERD-Commenter' 
"支持单行和多行的选择，//格式
"格式 ,cc注释当前行， ,cu去掉注释
"多行可以在V模式下选中再,cc

"for python -----end
filetype plugin indent on  
syntax on
"让任何Go文件保存前，调用goimports对该文件排版并插入/删除相应的import语句i
autocmd BufWritePre *.go :Fmt

"映射F8到形成go语言的tagbar
nmap <F8> :TagbarToggle<CR>
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }

set completeopt+=longest
" "回车即选中当前项
inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"
"  "上下左右键的行为
inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" :
inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" :
map <F3> :NERDTreeToggle<CR>
"多屏窗口移动键映射
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h
"mapleader将<leader>替换成赋予的值这里是','
let mapleader = "," 

"for python pep8 plugn
"let g:pep8_map='<leader>8'
"映射自动排序在Visual模式下
vnoremap <leader>s :sort<CR>
"===========================================================
"python IDE
"===========================================================
"for jedi-vim
let g:jedi#goto_assignments_command = "<leader>g"
let g:jedi#goto_definitions_command = "<leader>d"
let g:jedi#documentation_command = "K"
let g:jedi#usages_command = "<leader>n"
"智能补全可以用c-x c-o来做
let g:jedi#completions_command = "<C-Space>"
let g:jedi#rename_command = "<leader>r"
let g:jedi#show_call_signatures = "1"
let g:jedi#popup_on_dot = 1


" Better navigating through omnicomplete option list
" " See
" http://stackoverflow.com/questions/2170023/how-to-map-keys-for-popup-menu-in-vim
set completeopt=longest,menuone
function! OmniPopup(action)
    if pumvisible()
        if a:action == 'j'
            return "\<C-N>"
        elseif a:action == 'k'
            return "\<C-P>"
        endif
    endif
    return a:action
endfunction

inoremap <silent>j <C-R>=OmniPopup('j')<CR>
inoremap <silent>k <C-R>=OmniPopup('k')<CR>


"========================================================
imap ff <Esc> 
set whichwrap=b,s,<,>,[,]  "让退格，空格，上下箭头遇到行首行尾时自动移到下一行（包括insert模式）
"使用tab键来代替%进行匹配跳转
nnoremap <tab> %
vnoremap <tab> %

"***********	taglist    ************
nnoremap <leader>t :TlistToggle<CR>
let Tlist_Show_One_File = 1
let Tlist_Exit_OnlyWindow = 1
let Tlist_GainFocus_On_ToggleOpen = 1
